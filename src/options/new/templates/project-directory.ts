export const PACKAGE_JSON =
`{
    "name": "[[ProjectName]]",
    "version": "1.0.0",
    "scripts": {
        "start": "npm run serve:local",
        "build": "npm run build:prod",
        "serve:local": "webpack-dev-server --env=local --devtool source-map",
        "serve:dev": "webpack-dev-server --env=dev --devtool source-map",
        "build:prod": "webpack --env=prod",
        "build:dev": "webpack --env=dev",
        "initialize": "npm i webpack webpack-cli webpack-dev-server -g && npm i --save-dev && npm rebuild node-sass"
    },
    "private": true,
    "dependencies": {
        "@nimble-ts/core": "^[[NimbleVersion]]"
    },
    "devDependencies": {
        "@types/node": "^12.12.7",
        "@types/webpack-env": "^1.14.1",
        "clean-webpack-plugin": "^2.0.1",
        "copy-webpack-plugin": "^5.0.2",
        "css-loader": "^2.1.1",
        "file-loader": "^3.0.1",
        "html-loader": "^0.5.5",
        "html-webpack-plugin": "^3.2.0",
        "mini-css-extract-plugin": "^0.8.0",
        "node-sass": "^4.11.0",
        "postcss-loader": "^3.0.0",
        "prerender-spa-plugin": "^3.4.0",
        "sass-loader": "^7.1.0",
        "style-loader": "^0.23.1",
        "ts-loader": "^5.4.5",
        "typescript": "^3.7.3",
        "typescript-require": "^0.2.10",
        "webpack": "^4.28.1",
        "webpack-cli": "^3.2.1",
        "webpack-dev-server": "^3.1.14"
    }
}
`;

export const README = 
`# Nimble Application
This is a Nimble project application.`;

export const TSCONFIG =
`{
    "compileOnSave": false,
    "compilerOptions": {
        "allowJs": true,
        "module": "esnext",
        "target": "es5",
        "sourceMap": true,
        "baseUrl": "./",
        "outDir": "./dist/",
        "downlevelIteration": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "declaration": false,
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "moduleResolution": "node",
        "typeRoots": [
            "node_modules/@types"
        ],
        "lib": [
            "es2017",
            "dom"
        ],
        "paths": {
            "src/*": ["./src/*"]
        }
    },
    "include": [
        "./src/**/*"
    ]
}`;

export const GITIGNORE =
`dist

.DS_Store

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
/node_modules/
jspm_packages

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
`;