{"version":3,"file":"nb.js","sourceRoot":"","sources":["../src/nb.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer = require('inquirer');\nimport * as cp from 'child_process';\nimport { injectable, inject } from 'inversify';\nimport { Logger } from './utils/logger.util';\nimport { InitialValue } from './initial-value.enum';\nimport { QuestionAnswer } from './core/question-answer.model';\nimport { CLI } from './cli';\nimport { New } from './options/new/new';\nimport { Generate } from './options/generate/generate';\nimport { Readable } from 'stream';\nimport { Serve } from './commands/serve/serve';\n\n@injectable()\nexport class NB {\n\n    public initialArgs: string[] = [];\n    public args: string[] = [];\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    )\n    {\n    }\n\n    public setArgurments(args: string[]) {\n        this.args = args;\n        this.initialArgs = args;\n    }\n\n    public start() {\n        if(this.hasArgs())\n            this.processArgs();\n        else\n            this.execute();\n    }\n\n    private hasArgs() {\n        return this.args.length > 0;\n    }\n\n    private processArgs() {\n        let arg = this.args[0];\n        this.args = this.args.slice(1);\n        if (arg === '--version' || arg === '-v')\n            return this.logger.showVersion();\n        if (arg === 'serve' || arg === 's')\n            return CLI.inject<Serve>('Serve').execute(this.args);\n            // return this.runServe();\n        if (arg === 'build' || arg === 'b')\n            return this.runBuild();\n    }\n\n    private async execute() {\n        let answer: QuestionAnswer = await inquirer.prompt([{ \n            name: 'value',\n            type: 'list',\n            message: 'Select what do you want:',\n            choices: [\n                {name: 'Generate', value: InitialValue.GENERATE},\n                {name: 'Create a project', value: InitialValue.NEW},\n            ]\n        }]);\n\n        switch(answer.value) {\n            case InitialValue.NEW:\n                CLI.inject<New>('New');\n                break;\n            case InitialValue.GENERATE:\n                CLI.inject<Generate>('Generate');\n                break;\n        }\n    }\n\n    private async runServe() {\n        let nexts = this.args.slice(1);\n        let env = this.getArgValueIfExists(nexts, '--env');\n        let childProcess = cp.exec(`webpack-dev-server --env=${env ? env : 'local'} --devtool source-map --colors`);\n        (childProcess.stdout as Readable).on('data', (data) => {\n            console.log(data);\n        });\n        (childProcess.stderr as Readable).on('data', (data) => {\n            console.log(data);\n        });\n    }\n\n    private async runBuild() {\n        let nexts = this.args.slice(1);\n        let env = this.getArgValueIfExists(nexts, '--env');\n        let childProcess = cp.exec(`webpack --env=${env ? env : 'prod'} --colors`);\n        (childProcess.stdout as Readable).on('data', (data) => {\n            console.log(data);\n        });\n        (childProcess.stderr as Readable).on('data', (data) => {\n            console.log(data);\n        });\n    }\n\n    private getArgValueIfExists(args: string[], name: string): string | boolean {\n        for(let arg of args) {\n            arg = arg.trim();\n            let value = arg;\n            if (arg.includes('=')) {\n                let splitted = arg.split('=');\n                value = splitted[splitted.length - 1];\n                arg = splitted[0];\n            }\n            \n            if (arg === name)\n                return value === arg ? true : value;\n        }\n        return false;\n    }\n}"]}