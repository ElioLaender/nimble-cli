{"version":3,"file":"nb.js","sourceRoot":"","sources":["../src/nb.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer = require('inquirer');\r\nimport * as cp from 'child_process';\r\nimport { injectable, inject } from 'inversify';\r\nimport { Logger } from './utils/logger.util';\r\nimport { InitialValue } from './initial-value.enum';\r\nimport { QuestionAnswer } from './core/question-answer.model';\r\nimport { CLI } from './cli';\r\nimport { New } from './options/new/new';\r\nimport { Generate } from './options/generate/generate';\r\nimport { Readable } from 'stream';\r\nimport { Serve } from './commands/serve/serve';\r\nimport { Build } from './commands/build/build';\r\n\r\n@injectable()\r\nexport class NB {\r\n\r\n    public initialArgs: string[] = [];\r\n    public args: string[] = [];\r\n\r\n    constructor(\r\n        @inject('Logger') private logger: Logger\r\n    )\r\n    {\r\n    }\r\n\r\n    public setArgurments(args: string[]) {\r\n        this.args = args;\r\n        this.initialArgs = args;\r\n    }\r\n\r\n    public start() {\r\n        if(this.hasArgs())\r\n            this.processArgs();\r\n        else\r\n            this.execute();\r\n    }\r\n\r\n    private hasArgs() {\r\n        return this.args.length > 0;\r\n    }\r\n\r\n    private processArgs() {\r\n        let arg = this.args[0];\r\n        this.args = this.args.slice(1);\r\n        if (arg === '--version' || arg === '-v')\r\n            return this.logger.showVersion();\r\n        if (arg === 'serve' || arg === 's')\r\n            return CLI.inject<Serve>('Serve').execute(this.args);\r\n            // return this.runServe();\r\n        if (arg === 'build' || arg === 'b')\r\n            return CLI.inject<Build>('Build').execute(this.args);\r\n            // return this.runBuild();\r\n    }\r\n\r\n    private async execute() {\r\n        let answer: QuestionAnswer = await inquirer.prompt([{ \r\n            name: 'value',\r\n            type: 'list',\r\n            message: 'Select what do you want:',\r\n            choices: [\r\n                {name: 'Generate', value: InitialValue.GENERATE},\r\n                {name: 'Create a project', value: InitialValue.NEW},\r\n            ]\r\n        }]);\r\n\r\n        switch(answer.value) {\r\n            case InitialValue.NEW:\r\n                CLI.inject<New>('New');\r\n                break;\r\n            case InitialValue.GENERATE:\r\n                CLI.inject<Generate>('Generate');\r\n                break;\r\n        }\r\n    }\r\n\r\n    /* private async runServe() {\r\n        let nexts = this.args.slice(1);\r\n        let env = this.getArgValueIfExists(nexts, '--env');\r\n        let childProcess = cp.exec(`webpack-dev-server --env=${env ? env : 'local'} --devtool source-map --colors`);\r\n        (childProcess.stdout as Readable).on('data', (data) => {\r\n            console.log(data);\r\n        });\r\n        (childProcess.stderr as Readable).on('data', (data) => {\r\n            console.log(data);\r\n        });\r\n    }\r\n\r\n    private async runBuild() {\r\n        let nexts = this.args.slice(1);\r\n        let env = this.getArgValueIfExists(nexts, '--env');\r\n        let childProcess = cp.exec(`webpack --env=${env ? env : 'prod'} --colors`);\r\n        (childProcess.stdout as Readable).on('data', (data) => {\r\n            console.log(data);\r\n        });\r\n        (childProcess.stderr as Readable).on('data', (data) => {\r\n            console.log(data);\r\n        });\r\n    } */\r\n\r\n    private getArgValueIfExists(args: string[], name: string): string | boolean {\r\n        for(let arg of args) {\r\n            arg = arg.trim();\r\n            let value = arg;\r\n            if (arg.includes('=')) {\r\n                let splitted = arg.split('=');\r\n                value = splitted[splitted.length - 1];\r\n                arg = splitted[0];\r\n            }\r\n            \r\n            if (arg === name)\r\n                return value === arg ? true : value;\r\n        }\r\n        return false;\r\n    }\r\n}"]}