{"version":3,"file":"nb.js","sourceRoot":"","sources":["../src/nb.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer = require('inquirer');\nimport { injectable, inject } from 'inversify';\nimport { Logger } from './utils/logger.util';\nimport { InitialValue } from './initial-value.enum';\nimport { QuestionAnswer } from './core/question-answer.model';\nimport { CLI } from './cli';\nimport { New } from './options/new/new';\nimport { Generate } from './options/generate/generate';\nimport { Serve } from './commands/serve/serve';\nimport { Build } from './commands/build/build';\n\n@injectable()\nexport class NB {\n\n    public initialArgs: string[] = [];\n    public args: string[] = [];\n    private inNimbleProject: boolean = false;\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    )\n    {\n        this.inNimbleProject = CLI.isNimbleProject();\n    }\n\n    public setArgurments(args: string[]) {\n        this.args = args;\n        this.initialArgs = args;\n    }\n\n    public start() {\n        if(this.hasArgs())\n            this.processArgs();\n        else\n            this.execute();\n    }\n\n    private hasArgs() {\n        return this.args.length > 0;\n    }\n\n    private processArgs() {\n        let arg = this.args[0];\n        this.args = this.args.slice(1);\n        if (arg === '--version' || arg === '-v')\n            return this.logger.showVersion();\n        if (arg === 'serve' || arg === 's')\n            return CLI.inject<Serve>('Serve').execute(this.args);\n        if (arg === 'build' || arg === 'b')\n            return CLI.inject<Build>('Build').execute(this.args);\n        if (arg === 'new') {\n            return CLI.inject<New>('New');\n        }\n    }\n\n    private async execute() {\n        if (this.inNimbleProject) {\n            let answer: QuestionAnswer = await inquirer.prompt([{ \n                name: 'value',\n                type: 'list',\n                message: 'Select what do you want:',\n                choices: [\n                    {name: 'üõ†  Generate', value: InitialValue.GENERATE},\n                    {name: 'üñ•  Run server', value: InitialValue.SERVER},\n                    {name: 'üöÄ Run build', value: InitialValue.BUILD},\n                    {name: '‚ÜôÔ∏è   Exit', value: ''},\n                ]\n            }]);\n    \n            switch(answer.value) {\n                case InitialValue.SERVER:\n                    CLI.inject<Serve>('Serve').execute();\n                    break;\n                case InitialValue.BUILD:\n                    CLI.inject<Build>('Build').execute();\n                    break;\n                case InitialValue.GENERATE:\n                    CLI.inject<Generate>('Generate');\n                    break;\n            }\n        }\n        else {\n            let answer: QuestionAnswer = await inquirer.prompt([{ \n                name: 'value',\n                type: 'confirm',\n                message: 'Do you want create new Nimble project?',\n            }]);\n\n            if (answer.value) {\n                CLI.inject<New>('New');\n            }\n        }\n    }\n\n    private getArgValueIfExists(args: string[], name: string): string | boolean {\n        for(let arg of args) {\n            arg = arg.trim();\n            let value = arg;\n            if (arg.includes('=')) {\n                let splitted = arg.split('=');\n                value = splitted[splitted.length - 1];\n                arg = splitted[0];\n            }\n            \n            if (arg === name)\n                return value === arg ? true : value;\n        }\n        return false;\n    }\n}"]}