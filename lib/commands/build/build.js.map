{"version":3,"file":"build.js","sourceRoot":"","sources":["../../../src/commands/build/build.ts"],"names":[],"mappings":";;;AAIA,uCAA+C;AAS/C;IAQI,eAC8B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QANpC,gBAAW,GAAG,MAAM,CAAC;IAQ7B,CAAC;IAND,sBAAY,sBAAG;aAAf,cAAoB,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAW,CAAC,CAAC,CAAC;;;OAAA;IACnF,sBAAY,6BAAU;aAAtB,cAA2B,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAOxD,uBAAO,GAApB,UAAqB,IAAc;;;;;;KA4ElC;IAzFQ,KAAK;QADjB,sBAAU,EAAE;QAUJ,mBAAA,kBAAM,CAAC,QAAQ,CAAC,CAAA;OATZ,KAAK,CA0FjB;IAAD,YAAC;CAAA,AA1FD,IA0FC;AA1FY,sBAAK","sourcesContent":["import webpack from 'webpack';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport path from 'path';\nimport { inject, injectable } from 'inversify';\nimport { Logger } from '../../utils/logger.util';\nimport { ArgsResolver } from '../../core/args-resolver';\nimport { webpackConfig } from '../config/webpack.config';\nimport { PATHS } from '../../core/dev-utils/paths';\nimport { webpackDevServerUtils } from '../../core/dev-utils/webpack-dev-server-utils';\nimport { FileSizeReporter } from '../../core/dev-utils/file-size-reporter';\n\n@injectable()\nexport class Build {\n    private args!: ArgsResolver;\n\n    private DEFAULT_ENV = 'prod';\n\n    private get env() { return this.args.getValue('env', this.DEFAULT_ENV) as string; }\n    private get isProdMode() { return this.args.getValue('prod', true); }\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    ) {\n    }\n\n    public async execute(args: string[]) {\n        /* this.args = new ArgsResolver(args);\n\n        const config = webpackConfig(this.env, this.isProdMode);\n\n        FileSizeReporter.measureFileSizesBeforeBuild(PATHS.appBuild).then(previousFileSizes => {\n            // Remove all content but keep the directory so that\n            // if you're in it, you don't end up in Trash\n            fs.emptyDirSync(PATHS.appBuild);\n            // Merge with the public folder\n            copyPublicFolder();\n            // Start the webpack build\n            return build(previousFileSizes);\n        })\n        .then(\n            ({ stats, previousFileSizes, warnings }) => {\n                if (warnings.length) {\n                    console.log(chalk.yellow('Compiled with warnings.\\n'));\n                    console.log(warnings.join('\\n\\n'));\n                    console.log(\n                        '\\nSearch for the ' +\n                        chalk.underline(chalk.yellow('keywords')) +\n                        ' to learn more about each warning.'\n                    );\n                    console.log(\n                        'To ignore, add ' +\n                        chalk.cyan('// eslint-disable-next-line') +\n                        ' to the line before.\\n'\n                    );\n                } else {\n                    console.log(chalk.green('Compiled successfully.\\n'));\n                }\n\n                console.log('File sizes after gzip:\\n');\n                printFileSizesAfterBuild(\n                    stats,\n                    previousFileSizes,\n                    PATHS.appBuild,\n                    WARN_AFTER_BUNDLE_GZIP_SIZE,\n                    WARN_AFTER_CHUNK_GZIP_SIZE\n                );\n                console.log();\n\n                const appPackage = require(PATHS.appPackageJson);\n                const publicUrl = PATHS.publicUrl;\n                const publicPath = config.output.publicPath;\n                const buildFolder = path.relative(process.cwd(), PATHS.appBuild);\n                printHostingInstructions(\n                    appPackage,\n                    publicUrl,\n                    publicPath,\n                    buildFolder\n                );\n            },\n            (err) => {\n                const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';\n                if (tscCompileOnError) {\n                    console.log(\n                        chalk.yellow(\n                            'Compiled with the following type errors (you may want to check these before deploying your app):\\n'\n                        )\n                    );\n                    printBuildError(err);\n                } else {\n                    console.log(chalk.red('Failed to compile.\\n'));\n                    printBuildError(err);\n                    process.exit(1);\n                }\n            }\n        )\n        .catch(err => {\n            if (err && err.message) {\n                console.log(err.message);\n            }\n            process.exit(1);\n        }); */\n    }\n}"]}