{"version":3,"file":"serve.js","sourceRoot":"","sources":["../../../src/commands/serve/serve.ts"],"names":[],"mappings":"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","sourcesContent":["import webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\nimport chalk from 'chalk';\nimport { inject, injectable } from 'inversify';\nimport { Helper } from '../../core/helper';\nimport { Logger } from '../../utils/logger.util';\nimport { ArgsResolver } from '../../core/args-resolver';\nimport { webpackConfig } from '../config/webpack.config';\nimport { PATHS } from '../../core/dev-utils/paths';\nimport { webpackDevServerUtils } from '../../core/dev-utils/webpack-dev-server-utils';\nimport { CLI } from '../../cli';\n\n@injectable()\nexport class Serve {\n    private args!: ArgsResolver;\n\n    private DEFAULT_PORT = '8090';\n    private DEFAULT_HOST = '0.0.0.0';\n    private DEFAULT_ENV = 'local';\n\n    private get host() { return this.args.getValue('host', this.DEFAULT_HOST) as string; }\n    private get port() { return parseInt(this.args.getValue('port', this.DEFAULT_PORT) as string); }\n    private get env() { return this.args.getValue('env', this.DEFAULT_ENV) as string; }\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    ) {\n    }\n\n    public async execute(args: string[]) {\n        if (!CLI.isNimbleProject()){\n            this.logger.showError('To continue you must be in a Nimble project.');\n            process.exit(0);\n        }\n\n        this.args = new ArgsResolver(args);\n\n        const config = await webpackConfig(this.env);\n        const protocol = this.args.has('https') ? 'https' : 'http';\n        const appName = require(PATHS.appPackageJson).name;\n        const urls = webpackDevServerUtils.prepareUrls(protocol, this.host, this.port);\n\n        const devSocket = {\n            warnings: (warnings) => devServer.sockWrite(devServer.sockets, 'warnings', warnings),\n            errors: (errors) => devServer.sockWrite(devServer.sockets, 'errors', errors),\n        };\n\n        // Create a webpack compiler that is configured with custom messages.\n        const compiler = webpackDevServerUtils.createCompiler({\n            appName,\n            config,\n            devSocket,\n            urls,\n            webpack,\n        });\n\n        const devServer = new WebpackDevServer(compiler, {\n            host: this.host,\n            port: this.port,\n            historyApiFallback: true\n        });\n\n        devServer.listen(this.port, this.host, err => {\n            if (err) {\n                return console.log(err);\n            }\n\n            console.log(chalk.cyan('Starting the development server...\\n'));\n            // openBrowser(urls.localUrlForBrowser);\n        });\n\n        ['SIGINT', 'SIGTERM'].forEach((sig: any) => {\n            process.on(sig, () => {\n                devServer.close();\n                process.exit();\n            });\n        });\n    }\n}"]}