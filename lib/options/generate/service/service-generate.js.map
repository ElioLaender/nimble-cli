{"version":3,"file":"service-generate.js","sourceRoot":"","sources":["../../../../src/options/generate/service/service-generate.ts"],"names":[],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport inquirer = require('inquirer');\nimport { QuestionAnswer } from '../../../core/question-answer.model';\nimport { Logger } from '../../../utils/logger.util';\nimport { FileCreator } from '../../../core/file-creator/file-creator';\nimport { SERVICE_TS } from './service-generate-template';\nimport { BaseGenerate } from '../base-generate';\n\n@injectable()\nexport class ServiceGenerate extends BaseGenerate {\n\n    constructor(\n        @inject('Logger') private logger: Logger\n    ) {\n        super();\n    }\n\n    public async execute() {\n        let answer: QuestionAnswer = await this.question();\n        let name = answer.value.trim().toLowerCase();\n\n        if (this.isValid(name)) {\n            this.name = name;\n\n            if (this.name.startsWith('/'))\n                this.name = this.name.substr(1);\n            if (this.name.endsWith('/'))\n                this.name = this.name.substr(0, this.name.length - 1);\n\n            await this.startCreateSerivce();\n        }\n        else\n            await this.execute();\n    }\n\n    public question(): Promise<QuestionAnswer> {\n        return inquirer.prompt([{ \n            name: 'value',\n            type: 'input',\n            message: 'What is path and name? (ex.: services/auth)',\n        }]);\n    };\n\n    public isValid(name: string): boolean {\n        if(name === '') {\n            this.logger.showError('Cannot be empty.');\n            return false;\n        }\n        if(name.includes(' ')) {\n            this.logger.showError('Cannot contains whitespace.');\n            return false;\n        }\n        if(/[!$%^&*()+|~=`{}\\[\\]:\";'<>?,.]/.test(name)) {\n            this.logger.showError('Cannot have the following symbols: !$%^&*()+|~=`{}\\[\\]:\";\\'<>?,.');\n            return false;\n        }\n\n        return true;\n    }\n\n    private async startCreateSerivce() {\n        let creator = new FileCreator();\n        let { fileInstructions, lastDirectory } = this.getBaseFileInstructions();\n\n        if (lastDirectory)\n            lastDirectory.children.push({\n                name: `${this.fileName}.service.ts`,\n                content: this.replaceVariablesInContentFile(SERVICE_TS)\n            });\n        else\n            fileInstructions.push({\n                name: this.fileName,\n                content: this.replaceVariablesInContentFile(SERVICE_TS)\n            });\n\n        creator.initialize(fileInstructions);\n\n        await creator.startCreateFiles((response) => {\n            if (!response.error) {\n                this.logger.showCreated(response.fileInstruction.completePath());\n            }\n            else {\n                this.logger.showError(response.error);\n            }\n        });\n    }\n\n    private replaceVariablesInContentFile(content: string) {\n        let regex = /\\[\\[(.|\\n)*?\\]\\]/g;\n        if (regex.test(content)) {\n            content = content.replace(regex, (name) => {\n                name = name.replace(/(^\\[\\[)|(\\]\\]$)/g, '');\n                if (name !== '')\n                    return this.getValueByName(name);\n\n                return '';\n            });\n        }\n\n        return content;\n    }\n\n    private getValueByName(name: string){\n        switch(name) {\n            case 'Name':\n                return this.fileName;\n            case 'FriendlyName':\n                return this.fileFriendlyName;\n        }\n        return '';\n    }\n}"]}