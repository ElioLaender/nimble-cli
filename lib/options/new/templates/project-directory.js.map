{"version":3,"file":"project-directory.js","sourceRoot":"","sources":["../../../../src/options/new/templates/project-directory.ts"],"names":[],"mappings":";;AAAa,QAAA,cAAc,GAC3B,+6KAgLE,CAAC;AAEU,QAAA,YAAY,GACzB,ugDAuCC,CAAC;AAEW,QAAA,MAAM,GACnB,6DACsC,CAAC;AAE1B,QAAA,QAAQ,GACrB,gzBA8BE,CAAC;AAEU,QAAA,SAAS,GACtB,o/BAkEC,CAAC","sourcesContent":["export const WEBPACK_CONFIG = \r\n`const path = require('path');\r\nconst fs = require('fs');\r\nconst webpack = require('webpack');\r\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\nconst CopyPlugin = require('copy-webpack-plugin');\r\nconst PrerenderSpaPlugin = require('prerender-spa-plugin');\r\nconst Renderer = PrerenderSpaPlugin.PuppeteerRenderer;\r\nconst ts = require('typescript');\r\nconst configuration = require('./src/configuration.json');\r\n\r\nconst distPath = path.resolve(__dirname, 'dist');\r\n\r\nmodule.exports = (env) => {\r\n    let enviroment = loadEnvFile(env);\r\n    return {\r\n        mode: enviroment.production ? 'production' : 'development',\r\n        entry: getEntries(),\r\n        output: {\r\n            chunkFilename: '[name].[chunkhash].bundle.js',\r\n            filename: '[name].[chunkhash].bundle.js',\r\n            path: distPath,\r\n            publicPath: '/'\r\n        },\r\n        devServer: {\r\n            host: '0.0.0.0',\r\n            port: 8090,\r\n            historyApiFallback: true\r\n        },\r\n        watch: !enviroment.production,\r\n        watchOptions: { ignored: [ './node_modules' ] },\r\n        plugins: getPlugins(enviroment),\r\n        module: {\r\n            rules: getRules(enviroment)\r\n        },\r\n        resolve: {\r\n            extensions: [\".tsx\", \".ts\", \".js\"],\r\n            alias: (function() {\r\n                const tsconfigPath = './tsconfig.json';\r\n                const { baseUrl, paths } = require(tsconfigPath).compilerOptions;\r\n                const pathPrefix = path.resolve(path.dirname(tsconfigPath), baseUrl);\r\n                const aliases = {};\r\n\r\n                Object.keys(paths).forEach((item) => {\r\n                    const name = item.replace(\"/*\", \"\");\r\n                    const value = path.resolve(pathPrefix, paths[item][0].replace(\"/*\", \"\"));\r\n\r\n                    aliases[name] = value;\r\n                });\r\n\r\n                return aliases;\r\n            })(),\r\n        }\r\n    };\r\n};\r\n\r\nfunction getEntries() {\r\n    \r\n    let entry = { 'main': './src/index.ts' };\r\n    \r\n    if (configuration.vendors) {\r\n        if (configuration.vendors.js && configuration.vendors.js.length > 0)\r\n            entry['js-vendors'] = configuration.vendors.js.map((file) => {\r\n                return path.resolve(file);\r\n            });\r\n        if (configuration.vendors.css && configuration.vendors.css.length > 0)\r\n            entry['css-vendors'] = configuration.vendors.css.map((file) => {\r\n                return path.resolve(file);\r\n            });\r\n    }\r\n    return entry;\r\n}\r\n\r\nfunction getPlugins(enviroment) {\r\n    let plugins = [\r\n        new CleanWebpackPlugin(),\r\n        new HtmlWebpackPlugin({\r\n            template: './public/index.html',\r\n            filename: 'index.html',\r\n            hash: true\r\n        }),\r\n        new CopyPlugin([\r\n            { from: 'public', to: '.' },\r\n        ]),\r\n        new webpack.DefinePlugin({\r\n            'process.env': JSON.stringify(enviroment)\r\n        })\r\n    ];\r\n    \r\n    let preRender = configuration['pre-render'];\r\n    if (enviroment.production && preRender && preRender.enabled && preRender.routes && preRender.routes.length > 0) {\r\n        plugins.push(new PrerenderSpaPlugin({\r\n            staticDir: distPath,\r\n            routes: preRender.routes,\r\n            renderer: new Renderer({\r\n                renderAfterDocumentEvent: 'render-event'\r\n            }),\r\n            postProcess: function (renderedRoute) {\r\n                renderedRoute.html = renderedRoute.html.replace('<nimble-root', '<nimble-root style=\"visibility: hidden;\"');\r\n                renderedRoute.html = renderedRoute.html.replace(/<style type=\"text\\\\/css\">(.|\\\\n)*?<\\\\/style>/g, '');\r\n                return renderedRoute;\r\n            }\r\n        }));\r\n    }\r\n\r\n    return plugins;\r\n}\r\n\r\nfunction getRules(enviroment) {\r\n    let rules = [\r\n        {\r\n            test: /\\\\.(ts|js)x?$/,\r\n            exclude: /node_modules/,\r\n            loader: 'ts-loader'\r\n        },\r\n        {\r\n            test: /\\\\.css$/,\r\n            use: ['style-loader', 'css-loader']\r\n        },\r\n        {\r\n            test: /\\\\.scss$/,\r\n            use: [\r\n                'style-loader',\r\n                'css-loader',\r\n                'sass-loader',\r\n            ]\r\n        },\r\n        {\r\n            test: /\\\\.(svg|png|jpg)$/,\r\n            loader: 'file-loader',\r\n            options: {\r\n                name:'[name].[ext]',\r\n                outputhPath: 'assets/img/',\r\n                publicPath: 'assets/img/'\r\n            }\r\n        },\r\n        {\r\n            test: /\\\\.(ttf|woff|woff2)$/,\r\n            loader: 'file-loader',\r\n            options: {\r\n                name:'[name].[ext]',\r\n                outputhPath: 'assets/fonts/',\r\n                publicPath: 'assets/fonts/'\r\n            }\r\n        },\r\n        {\r\n            test: /\\\\.html$/,\r\n            use: 'html-loader'\r\n        }\r\n    ];\r\n\r\n    return rules;\r\n}\r\n\r\nfunction loadEnvFile(env) {\r\n    if (env) {\r\n        var enviroment = require(\\`./src/enviroments/env.\\${env}.js\\`);\r\n        if (enviroment) {\r\n            return enviroment;\r\n        }\r\n    }\r\n    return {\r\n        production: true\r\n    };\r\n}\r\n\r\nfunction readTsFile(filePath) {\r\n    if (filePath) {\r\n        if (!filePath.endsWith('.ts'))\r\n            filePath += '.ts';\r\n        const content = ts.transpileModule(fs.readFileSync(filePath, 'utf8'), {\r\n            compilerOptions: { module: ts.ModuleKind.CommonJS }\r\n        }).outputText;\r\n        return eval(content);\r\n    }\r\n    return  {};\r\n}`;\r\n\r\nexport const PACKAGE_JSON =\r\n`{\r\n    \"name\": \"[[ProjectName]]\",\r\n    \"version\": \"1.0.0\",\r\n    \"scripts\": {\r\n        \"start\": \"npm run serve:local\",\r\n        \"build\": \"npm run build:prod\",\r\n        \"serve:local\": \"webpack-dev-server --env=local --devtool source-map\",\r\n        \"serve:dev\": \"webpack-dev-server --env=dev --devtool source-map\",\r\n        \"build:prod\": \"webpack --env=prod\",\r\n        \"build:dev\": \"webpack --env=dev\",\r\n        \"initialize\": \"npm i webpack webpack-cli webpack-dev-server -g && npm i --save-dev && npm rebuild node-sass\"\r\n    },\r\n    \"private\": true,\r\n    \"dependencies\": {\r\n        \"@nimble-ts/core\": \"^[[NimbleVersion]]\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"@types/node\": \"^12.12.7\",\r\n        \"@types/webpack-env\": \"^1.14.1\",\r\n        \"clean-webpack-plugin\": \"^2.0.1\",\r\n        \"copy-webpack-plugin\": \"^5.0.2\",\r\n        \"css-loader\": \"^2.1.1\",\r\n        \"file-loader\": \"^3.0.1\",\r\n        \"html-loader\": \"^0.5.5\",\r\n        \"html-webpack-plugin\": \"^3.2.0\",\r\n        \"mini-css-extract-plugin\": \"^0.8.0\",\r\n        \"node-sass\": \"^4.11.0\",\r\n        \"postcss-loader\": \"^3.0.0\",\r\n        \"prerender-spa-plugin\": \"^3.4.0\",\r\n        \"sass-loader\": \"^7.1.0\",\r\n        \"style-loader\": \"^0.23.1\",\r\n        \"ts-loader\": \"^5.4.5\",\r\n        \"typescript\": \"^3.7.3\",\r\n        \"typescript-require\": \"^0.2.10\",\r\n        \"webpack\": \"^4.28.1\",\r\n        \"webpack-cli\": \"^3.2.1\",\r\n        \"webpack-dev-server\": \"^3.1.14\"\r\n    }\r\n}\r\n`;\r\n\r\nexport const README = \r\n`# Nimble Application\r\nThis is a Nimble project application.`;\r\n\r\nexport const TSCONFIG =\r\n`{\r\n    \"compileOnSave\": false,\r\n    \"compilerOptions\": {\r\n        \"allowJs\": true,\r\n        \"module\": \"esnext\",\r\n        \"target\": \"es5\",\r\n        \"sourceMap\": true,\r\n        \"baseUrl\": \"./\",\r\n        \"outDir\": \"./dist/\",\r\n        \"downlevelIteration\": true,\r\n        \"emitDecoratorMetadata\": true,\r\n        \"experimentalDecorators\": true,\r\n        \"declaration\": false,\r\n        \"esModuleInterop\": true,\r\n        \"allowSyntheticDefaultImports\": true,\r\n        \"moduleResolution\": \"node\",\r\n        \"typeRoots\": [\r\n            \"node_modules/@types\"\r\n        ],\r\n        \"lib\": [\r\n            \"es2018\",\r\n            \"dom\"\r\n        ],\r\n        \"paths\": {\r\n            \"src/*\": [\"./src/*\"]\r\n        }\r\n    },\r\n    \"include\": [\r\n        \"./src/**/*\"\r\n    ]\r\n}`;\r\n\r\nexport const GITIGNORE =\r\n`dist\r\n\r\n.DS_Store\r\n\r\n# Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\n\r\n# Runtime data\r\npids\r\n*.pid\r\n*.seed\r\n*.pid.lock\r\n\r\n# Directory for instrumented libs generated by jscoverage/JSCover\r\nlib-cov\r\n\r\n# Coverage directory used by tools like istanbul\r\ncoverage\r\n\r\n# nyc test coverage\r\n.nyc_output\r\n\r\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\r\n.grunt\r\n\r\n# Bower dependency directory (https://bower.io/)\r\nbower_components\r\n\r\n# node-waf configuration\r\n.lock-wscript\r\n\r\n# Compiled binary addons (https://nodejs.org/api/addons.html)\r\nbuild/Release\r\n\r\n# Dependency directories\r\nnode_modules\r\n/node_modules/\r\njspm_packages\r\n\r\n# TypeScript v1 declaration files\r\ntypings/\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# Optional REPL history\r\n.node_repl_history\r\n\r\n# Output of 'npm pack'\r\n*.tgz\r\n\r\n# Yarn Integrity file\r\n.yarn-integrity\r\n\r\n# dotenv environment variables file\r\n.env\r\n\r\n# next.js build output\r\n.next\r\n`;"]}