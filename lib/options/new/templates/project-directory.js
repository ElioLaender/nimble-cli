"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WEBPACK_CONFIG = "const path = require('path');\nconst fs = require('fs');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyPlugin = require('copy-webpack-plugin');\nconst PrerenderSpaPlugin = require('prerender-spa-plugin');\nconst Renderer = PrerenderSpaPlugin.PuppeteerRenderer;\nconst ts = require('typescript');\nconst configuration = require('./src/configuration.json');\n\nconst distPath = path.resolve(__dirname, 'dist');\n\nmodule.exports = (env) => {\n    let enviroment = loadEnvFile(env);\n    return {\n        mode: enviroment.production ? 'production' : 'development',\n        entry: getEntries(),\n        output: {\n            chunkFilename: '[name].[chunkhash].bundle.js',\n            filename: '[name].[chunkhash].bundle.js',\n            path: distPath,\n            publicPath: '/'\n        },\n        devServer: {\n            host: '0.0.0.0',\n            port: 8090,\n            historyApiFallback: true\n        },\n        watch: !enviroment.production,\n        watchOptions: { ignored: [ './node_modules' ] },\n        plugins: getPlugins(enviroment),\n        module: {\n            rules: getRules(enviroment)\n        },\n        resolve: {\n            extensions: [\".tsx\", \".ts\", \".js\"],\n            alias: (function() {\n                const tsconfigPath = './tsconfig.json';\n                const { baseUrl, paths } = require(tsconfigPath).compilerOptions;\n                const pathPrefix = path.resolve(path.dirname(tsconfigPath), baseUrl);\n                const aliases = {};\n\n                Object.keys(paths).forEach((item) => {\n                    const name = item.replace(\"/*\", \"\");\n                    const value = path.resolve(pathPrefix, paths[item][0].replace(\"/*\", \"\"));\n\n                    aliases[name] = value;\n                });\n\n                return aliases;\n            })(),\n        }\n    };\n};\n\nfunction getEntries() {\n    \n    let entry = { 'main': './src/index.ts' };\n    \n    if (configuration.vendors) {\n        if (configuration.vendors.js && configuration.vendors.js.length > 0)\n            entry['js-vendors'] = configuration.vendors.js.map((file) => {\n                return path.resolve(file);\n            });\n        if (configuration.vendors.css && configuration.vendors.css.length > 0)\n            entry['css-vendors'] = configuration.vendors.css.map((file) => {\n                return path.resolve(file);\n            });\n    }\n    return entry;\n}\n\nfunction getPlugins(enviroment) {\n    let plugins = [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            template: './public/index.html',\n            filename: 'index.html',\n            hash: true\n        }),\n        new CopyPlugin([\n            { from: 'public', to: '.' },\n        ]),\n        new webpack.DefinePlugin({\n            'process.env': JSON.stringify(enviroment)\n        })\n    ];\n    \n    let preRender = configuration['pre-render'];\n    if (enviroment.production && preRender && preRender.enabled && preRender.routes && preRender.routes.length > 0) {\n        plugins.push(new PrerenderSpaPlugin({\n            staticDir: distPath,\n            routes: preRender.routes,\n            renderer: new Renderer({\n                renderAfterDocumentEvent: 'render-event'\n            }),\n            postProcess: function (renderedRoute) {\n                renderedRoute.html = renderedRoute.html.replace('<nimble-root', '<nimble-root style=\"visibility: hidden;\"');\n                renderedRoute.html = renderedRoute.html.replace(/<style type=\"text\\/css\">(.|\\n)*?<\\/style>/g, '');\n                return renderedRoute;\n            }\n        }));\n    }\n\n    return plugins;\n}\n\nfunction getRules(enviroment) {\n    let rules = [\n        {\n            test: /\\.(ts|js)x?$/,\n            exclude: /node_modules/,\n            loader: 'ts-loader'\n        },\n        {\n            test: /\\.css$/,\n            use: ['style-loader', 'css-loader']\n        },\n        {\n            test: /\\.scss$/,\n            use: [\n                'style-loader',\n                'css-loader',\n                'sass-loader',\n            ]\n        },\n        {\n            test: /\\.(svg|png|jpg)$/,\n            loader: 'file-loader',\n            options: {\n                name:'[name].[ext]',\n                outputhPath: 'assets/img/',\n                publicPath: 'assets/img/'\n            }\n        },\n        {\n            test: /\\.(ttf|woff|woff2)$/,\n            loader: 'file-loader',\n            options: {\n                name:'[name].[ext]',\n                outputhPath: 'assets/fonts/',\n                publicPath: 'assets/fonts/'\n            }\n        },\n        {\n            test: /\\.html$/,\n            use: 'html-loader'\n        }\n    ];\n\n    return rules;\n}\n\nfunction loadEnvFile(env) {\n    if (env) {\n        var enviroment = require(`./src/enviroments/env.${env}.js`);\n        if (enviroment) {\n            return enviroment;\n        }\n    }\n    return {\n        production: true\n    };\n}\n\nfunction readTsFile(filePath) {\n    if (filePath) {\n        if (!filePath.endsWith('.ts'))\n            filePath += '.ts';\n        const content = ts.transpileModule(fs.readFileSync(filePath, 'utf8'), {\n            compilerOptions: { module: ts.ModuleKind.CommonJS }\n        }).outputText;\n        return eval(content);\n    }\n    return  {};\n}";
exports.PACKAGE_JSON = "{\n    \"name\": \"[[ProjectName]]\",\n    \"version\": \"1.0.0\",\n    \"scripts\": {\n        \"start\": \"npm run serve:local\",\n        \"build\": \"npm run build:prod\",\n        \"serve:local\": \"webpack-dev-server --env=local --devtool source-map\",\n        \"serve:dev\": \"webpack-dev-server --env=dev --devtool source-map\",\n        \"build:prod\": \"webpack --env=prod\",\n        \"build:dev\": \"webpack --env=dev\",\n        \"initialize\": \"npm i webpack webpack-cli webpack-dev-server -g && npm i --save-dev && npm rebuild node-sass\"\n    },\n    \"private\": true,\n    \"dependencies\": {\n        \"@nimble-ts/core\": \"^[[NimbleVersion]]\"\n    },\n    \"devDependencies\": {\n        \"@types/node\": \"^12.12.7\",\n        \"@types/webpack-env\": \"^1.14.1\",\n        \"clean-webpack-plugin\": \"^2.0.1\",\n        \"copy-webpack-plugin\": \"^5.0.2\",\n        \"css-loader\": \"^2.1.1\",\n        \"file-loader\": \"^3.0.1\",\n        \"html-loader\": \"^0.5.5\",\n        \"html-webpack-plugin\": \"^3.2.0\",\n        \"mini-css-extract-plugin\": \"^0.8.0\",\n        \"node-sass\": \"^4.11.0\",\n        \"postcss-loader\": \"^3.0.0\",\n        \"prerender-spa-plugin\": \"^3.4.0\",\n        \"sass-loader\": \"^7.1.0\",\n        \"style-loader\": \"^0.23.1\",\n        \"ts-loader\": \"^5.4.5\",\n        \"typescript\": \"^3.7.3\",\n        \"typescript-require\": \"^0.2.10\",\n        \"webpack\": \"^4.28.1\",\n        \"webpack-cli\": \"^3.2.1\",\n        \"webpack-dev-server\": \"^3.1.14\"\n    }\n}\n";
exports.README = "# Nimble Application\nThis is a Nimble project application.";
exports.TSCONFIG = "{\n    \"compileOnSave\": false,\n    \"compilerOptions\": {\n        \"allowJs\": true,\n        \"module\": \"esnext\",\n        \"target\": \"es5\",\n        \"sourceMap\": true,\n        \"baseUrl\": \"./\",\n        \"outDir\": \"./dist/\",\n        \"downlevelIteration\": true,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"declaration\": false,\n        \"esModuleInterop\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"moduleResolution\": \"node\",\n        \"typeRoots\": [\n            \"node_modules/@types\"\n        ],\n        \"lib\": [\n            \"es2018\",\n            \"dom\"\n        ],\n        \"paths\": {\n            \"src/*\": [\"./src/*\"]\n        }\n    },\n    \"include\": [\n        \"./src/**/*\"\n    ]\n}";
exports.GITIGNORE = "dist\n\n.DS_Store\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\n/node_modules/\njspm_packages\n\n# TypeScript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n";
//# sourceMappingURL=project-directory.js.map