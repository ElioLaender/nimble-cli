{"version":3,"file":"args-resolver.js","sourceRoot":"","sources":["../../src/core/args-resolver.ts"],"names":[],"mappings":";;AAAA,8BAA6B;AAG7B;IAII,sBAAY,IAAc;QAHlB,SAAI,GAAmC,EAAE,CAAC;QAC1C,WAAM,GAAW,SAAG,CAAC,MAAM,CAAS,QAAQ,CAAC,CAAC;QAGlD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEO,kCAAW,GAAnB,UAAoB,IAAc;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACtB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;iBACxF;;oBAEG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAClD;iBACI,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC1B,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;oBACvB,CAAC,EAAE,CAAC;oBACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;iBACjD;;oBAEG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aAClD;iBACI,IAAI,GAAG;gBACR,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SAClD;IACL,CAAC;IAEM,+BAAQ,GAAf,UAAgB,OAAe,EAAE,YAAmC;QAAnC,6BAAA,EAAA,iBAAmC;QAChE,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;IAC5D,CAAC;IAEM,0BAAG,GAAV,UAAW,OAAe;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,OAAO,EAAlB,CAAkB,CAAC,CAAC;IACnD,CAAC;IAEM,0BAAG,GAAV,UAAW,OAAe;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,OAAO,EAAlB,CAAkB,CAAC,CAAC;IACnD,CAAC;IACL,mBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,oCAAY","sourcesContent":["import { CLI } from '../cli';\r\nimport { Logger } from '../utils/logger.util';\r\n\r\nexport class ArgsResolver {\r\n    private args: { name: string, value: any }[] = [];\r\n    private logger: Logger = CLI.inject<Logger>('Logger');\r\n\r\n    constructor(args: string[]) {\r\n        this.resolveArgs(args);\r\n    }\r\n    \r\n    private resolveArgs(args: string[]) {\r\n        for (let i = 0; i < args.length; i++) {\r\n            let arg = args[i];\r\n            if (arg.startsWith('--')) {\r\n                arg = arg.substr(2);\r\n                if (arg.split('=').length > 1) {\r\n                    this.args.push({ name: arg.split('=')[0], value: arg.split('=').slice(1).join('') });\r\n                }\r\n                else\r\n                    this.args.push({ name: arg, value: true });\r\n            }\r\n            else if (arg.startsWith('-')) {\r\n                arg = arg.substr(1);\r\n                if ((i + 1) < args.length) {\r\n                    i++;\r\n                    this.args.push({ name: arg, value: args[i] });\r\n                }\r\n                else\r\n                    this.args.push({ name: arg, value: true });\r\n            }\r\n            else if (arg)\r\n                this.args.push({ name: arg, value: true });\r\n        }\r\n    }\r\n\r\n    public getValue(argName: string, defaultValue: boolean | string = '') {\r\n        let arg = this.get(argName);\r\n        return arg ? (arg.value || defaultValue) : defaultValue;\r\n    }\r\n\r\n    public has(argName: string) {\r\n        return this.args.some(x => x.name === argName);\r\n    }\r\n\r\n    public get(argName: string) {\r\n        return this.args.find(x => x.name === argName);\r\n    }\r\n}"]}