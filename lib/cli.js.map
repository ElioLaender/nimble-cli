{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { Container } from 'inversify';\nimport { DependencyRegister } from './dependency-register';\nimport { NB } from './nb';\n\nexport class CLI {\n    public static container = new Container();\n    public static nb: NB;\n    public static package: any;\n    public static nimbleVersion: string = '1.2.5';\n\n    public static get version() { return this.package ? this.package.version : '1.0.0'; }\n\n    public static get worksPath() { return process.cwd(); }\n    \n    public static start() {\n        this.getInformation();\n        DependencyRegister.register(this.container);\n\n        this.nb = this.container.get<NB>('NB');\n        this.nb.setArgurments(process.argv.slice(2));\n        this.nb.start();\n    }\n\n    public static inject<T>(type: string) {\n        return this.container.get<T>(type);\n    }\n\n    public static worksPathIsRootProject(path?: string) {\n        if (!path) path = this.worksPath;\n        if(!path.endsWith('/')) path += '/';\n\n        if (!fs.pathExistsSync(`${path}src`) || !fs.existsSync(`${path}package.json`)) {\n            return false\n        }\n        if (!fs.existsSync(`${path}nimble.json`)) {\n            return false;\n        }\n\n        let packageFile = null;\n        try { packageFile = require(`${path}package.json`); } catch {}\n        if (!packageFile || !packageFile['dependencies'] || !packageFile['dependencies']['@nimble-ts/core'])\n            return false;\n\n        return true;\n    }\n\n    public static worksPathIsSourceDir() {\n        let dirName = this.worksPath.split(path.sep).pop();\n        return dirName === 'src';\n    }\n\n    public static isNimbleProject() {\n        let parent = this.worksPath;\n        while(parent && parent !== path.sep) {\n            if (this.worksPathIsRootProject(parent))\n                return true;\n            parent = this.getParentPath(parent);\n        }\n        return false;\n    }\n\n    public static getNimbleProjectRootPath() {\n        let parent = this.worksPath;\n        while(parent && parent !== path.sep) {\n            if (this.worksPathIsRootProject(parent))\n                return parent;\n            parent = this.getParentPath(parent);\n        }\n        return '';\n    }\n\n    public static getParentPath(completePath: string) {\n        let parentPath = path.normalize(completePath + '/..');\n        return parentPath;\n    }\n\n    private static getInformation() {\n        try {\n            this.package = require('package.json');\n        }\n        catch {\n            this.package = require('../package.json');\n        }\n    }\n    \n}\n\nCLI.start();"]}